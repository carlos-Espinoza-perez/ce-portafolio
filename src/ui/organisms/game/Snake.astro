---
import { CircleIcon } from "../../atoms";
---

<style>
  .game__wrapper {
    width: 100%;
    height: 100%;

    display: flex;
    gap: 16px;
  }

  canvas {
    height: 100%;

    background: rgba(1, 22, 39, 0.84);
    box-shadow: inset 1px 5px 11px rgba(2, 18, 27, 0.71);
    border-radius: 12px;
    cursor: pointer;
  }

  .game_actions {
    display: none;
  }

  .game_control {
    background: rgba(1, 20, 35, 0.19);
    border-radius: 12px;
    color: white;

    padding: 12px;
  }

  @media screen and (min-width: 1440px) {
    .game_actions {
      display: block;
    }

    .game_control__keys {
      margin-top: 20px;

      display: grid;
      gap: 4px;
      grid-template-columns: 50px 50px 50px;
      justify-content: center;
    }

    .game_control__key {
      background: #010c15;
      border: 1px solid #1e2d3d;
      border-radius: 8px;

      width: 50px;
      height: 30px;
    }

    /* Up Arrow */
    .game_control__key:nth-child(1) {
      grid-area: 1/2;
    }

    /* Down Arrow */
    .game_control__key:nth-child(2) {
      grid-area: 2/1;
    }

    /* Left Arrow */
    .game_control__key:nth-child(3) {
      grid-area: 2/2;
    }

    /* Right Arrow */
    .game_control__key:nth-child(4) {
      grid-area: 2/3;
    }

    .game_points {
      margin-top: 22px;
      color: white;
    }

    .game_points__list {
      display: flex;
      gap: 8px;
      margin-top: 8px;
      flex-wrap: wrap;
    }
  }
</style>

<div class="game__wrapper">
  <canvas></canvas>

  <div class="game_actions">
    <div class="game_control">
      <div class="game_control__text">
        <p>// Maneja el juego en</p>
        <p>// el teclado o con</p>
      </div>

      <div class="game_control__keys">
        <button class="game_control__key up" data-key="38">↑</button>
        <button class="game_control__key left" data-key="37">←</button>
        <button class="game_control__key down" data-key="40">↓</button>
        <button class="game_control__key right" data-key="39">→</button>
      </div>
    </div>

    <div class="game_points">
      <p>// Puntos</p>

      <div class="game_points__list">
        <CircleIcon class:list={["game_points__item"]} />
        <CircleIcon class:list={["game_points__item"]} />
        <CircleIcon class:list={["game_points__item"]} />
        <CircleIcon class:list={["game_points__item"]} />
        <CircleIcon class:list={["game_points__item"]} />
      </div>
    </div>
  </div>
</div>

<script>
  type Snake = {
    x: number;
    y: number;
    direction: "top" | "right" | "bottom" | "left";
    speed: number;
  };

  type Coordinate = {
    x: number;
    y: number;
  };

  const widthBody = document.body.offsetWidth;

  const getCanvas = () => {
    let canvas = document.querySelector("canvas");
    if (!canvas) canvas = document.createElement("canvas");

    canvas.height = canvas.parentElement?.offsetHeight || 300;

    if (widthBody < 1024) canvas.width = 258;
    else canvas.width = 240;

    return canvas;
  };

  document.addEventListener("resize", () => {
    getCanvas();
  });

  const canvas = getCanvas();
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;

  const isAutoGame = document.body.offsetWidth < 1440;
  let gameStart = document.body.offsetWidth < 1024;

  const widthSquare = 8;
  const heightSquare = 8;

  const listEclipseAppleCtx: CanvasRenderingContext2D[] = [];
  const color = "67, 217, 173";

  let snake: Snake = {
    x: 120,
    y: 80,
    direction: "top",
    speed: 200,
  };

  const snakeCopy: Snake = JSON.parse(JSON.stringify(snake));
  let snakeBody = [
    { x: snake.x, y: snake.y },
    { x: snake.x, y: snake.y + 8 },
    { x: snake.x, y: snake.y + 16 },
    { x: snake.x, y: snake.y + 24 },
    { x: snake.x, y: snake.y + 32 },
    { x: snake.x, y: snake.y + 40 },
    { x: snake.x, y: snake.y + 48 },
    { x: snake.x, y: snake.y + 56 },
    { x: snake.x, y: snake.y + 64 },
    { x: snake.x + 8, y: snake.y + 64 },
    { x: snake.x + 16, y: snake.y + 64 },
    { x: snake.x + 24, y: snake.y + 64 },
    { x: snake.x + 32, y: snake.y + 64 },
    { x: snake.x + 40, y: snake.y + 64 },
    { x: snake.x + 48, y: snake.y + 64 },
    { x: snake.x + 56, y: snake.y + 64 },
    { x: snake.x + 64, y: snake.y + 64 },
    { x: snake.x + 64, y: snake.y + 72 },
    { x: snake.x + 64, y: snake.y + 80 },
    { x: snake.x + 64, y: snake.y + 88 },
    { x: snake.x + 64, y: snake.y + 96 },
    { x: snake.x + 64, y: snake.y + 104 },
  ];

  const snakeBodyCopy = JSON.parse(JSON.stringify(snakeBody));

  const apple = {
    x:
      Math.round(
        (Math.floor(Math.random() * (canvas.width - 30)) + 30) / widthSquare
      ) * widthSquare,
    y:
      Math.round(
        (Math.floor(Math.random() * (canvas.height - 30)) + 30) / heightSquare
      ) * heightSquare,
  };

  let gameOver = false;

  // #region Drawing
  const getRandomApple = () => {
    // apple.x = snake.x - 8;
    // apple.y = snake.y - 8;
    if (gameOver) return;
    let x = Math.floor(Math.random() * (canvas.width - 30)) + 30;
    let y = Math.floor(Math.random() * (canvas.height - 30)) + 30;

    x = Math.round(x / widthSquare) * widthSquare;
    y = Math.round(y / heightSquare) * heightSquare;

    const existSnakePart = snakeBody.find((item) => item.x == x && item.y == y);
    if (existSnakePart) return getRandomApple();

    apple.x = x;
    apple.y = y;
  };

  const getGrade = (index: number) => {
    if (index == 0.05) index = 0;

    const snakePart = snakeBody[index];
    const lessSnakePart: { x: number; y: number } | undefined =
      snakeBody[index - 1];

    const linearGradientDirection = {
      x1: lessSnakePart?.x || snakePart.x,
      y1: lessSnakePart?.y || snakePart.y,
      x2: lessSnakePart?.x || snakePart.x,
      y2: lessSnakePart?.y || snakePart.y,
    };

    if (lessSnakePart) {
      // El cuadro anterior esta arriba
      if (lessSnakePart.y < snakePart.y)
        linearGradientDirection.y2 += heightSquare;
      // El cuadro anterior esta abajo
      else if (lessSnakePart.y > snakePart.y)
        linearGradientDirection.y1 -= heightSquare;
      // El cuadro anterior esta a la izquierda
      else if (lessSnakePart.x < snakePart.x) {
        linearGradientDirection.x2 += widthSquare;
      }
      // El cuadro anterior esta a la derecha
      else if (lessSnakePart.x > snakePart.x)
        linearGradientDirection.x1 -= widthSquare;
    }

    return linearGradientDirection;
  };

  const getListColorPartSnacke = () => {
    const maxIndex = snakeBody.length - 1;

    const listColorPartSnacke = [];

    // Asignando colores desbloqueados
    for (const item of snakeBody) {
      let index = snakeBody.indexOf(item);
      if (index == 0) index = 0.05;

      let porcentageCount = (index * 100) / maxIndex;
      porcentageCount = porcentageCount / 100;

      const color = `rgba(67, 217, 173, ${porcentageCount.toFixed(2)})`;

      listColorPartSnacke.push({
        0: "red",
        1: color,
        linearGradientDirection: getGrade(index),
      });
    }

    for (const item of listColorPartSnacke) {
      const index = listColorPartSnacke.indexOf(item);
      const next = listColorPartSnacke[index + 1];

      if (next) item[0] = next[1];
      else item[0] = item[1];
    }

    return listColorPartSnacke.reverse();
  };

  const clearApple = () => {
    const initialWidth = 6;
    const sumWidth = 4;

    let index = 0;
    for (const ctxEclipse of listEclipseAppleCtx) {
      const width = initialWidth + sumWidth * index;

      let x = apple.x - width;
      let y = apple.y - width;

      if (isAutoGame) y += 8;
      ctxEclipse.beginPath();
      ctxEclipse.clearRect(x, y, width * 2, width * 2);

      ctxEclipse.fill();
      index++;
    }
  };

  const printApple = () => {
    const opacityEclipse = [1, 0.2, 0.1];
    const initialWidth = 6;
    const sumWidth = 4;

    opacityEclipse.forEach((opacity, index) => {
      const width = initialWidth + sumWidth * index;

      ctx.beginPath();
      let x = apple.x - widthSquare / 2;
      let y = apple.y - widthSquare / 2;

      if (isAutoGame) y += 8;

      ctx.arc(x, y, width, 0, Math.PI * 2);
      ctx.fillStyle = `rgba(${color}, ${opacity})`;
      ctx.fill();

      listEclipseAppleCtx.push(ctx);
    });
  };

  const getPropertyDirectionSnake = (snakePart: { x: number; y: number }) => {
    const direction = snake.direction;
    const radio = widthSquare / 2;
    const properties = {
      x: 0,
      y: 0,
      width: radio,
      startAngle: 180,
      endAngle: 360,
    };

    if (direction == "top") {
      properties.x = snakePart.x + radio;
      properties.y = snakePart.y + heightSquare;
    }

    if (direction == "left") {
      properties.x = snakePart.x + widthSquare;
      properties.y = snakePart.y + radio;
    }

    if (direction == "bottom") {
      properties.x = snakePart.x + radio;
      properties.y = snakePart.y + radio / 2 - 2;
    }

    if (direction == "right") {
      properties.x = snakePart.x + radio - 4;
      properties.y = snakePart.y + radio;
    }

    return properties;
  };

  const printSnake = () => {
    const colors = getListColorPartSnacke();
    snakeBody.forEach((snakePart, index) => {
      ctx.beginPath();
      const color = colors[index];

      const gradient = ctx.createLinearGradient(
        color.linearGradientDirection.x1,
        color.linearGradientDirection.y1,
        color.linearGradientDirection.x2,
        color.linearGradientDirection.y2
      );

      gradient.addColorStop(0, color[0]);
      gradient.addColorStop(1, color[1]);

      ctx.fillStyle = gradient;

      if (index == 0) {
        const properties = getPropertyDirectionSnake(snakePart);

        ctx.arc(
          properties.x,
          properties.y,
          properties.width,
          properties.startAngle,
          properties.endAngle
        );
      } else ctx.fillRect(snakePart.x, snakePart.y, widthSquare, heightSquare);
      ctx.fill();
    });

    ctx.beginPath();
  };

  const clearSnake = () => {
    snakeBody.forEach((snakePart) => {
      ctx.clearRect(snakePart.x, snakePart.y, widthSquare, heightSquare);
    });
  };

  const eventClickReload = (
    event: MouseEvent,
    rect: { x: number; y: number; width: number; height: number }
  ) => {
    const rectBounds = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rectBounds.left;
    const mouseY = event.clientY - rectBounds.top;

    const start = rect.x - rect.width / 2;
    const startY = rect.y + rect.height / 2;

    // Verificar si el ratón está sobre el rectángulo
    if (
      mouseX >= start &&
      mouseX <= start + rect.width &&
      mouseY >= startY &&
      mouseY <= startY + rect.height
    ) {
      canvas.style.cursor = "pointer"; // Cambiar el cursor a pointer

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      gameOver = false;

      snakeBody = JSON.parse(JSON.stringify(snakeBodyCopy));
      snake = JSON.parse(JSON.stringify(snakeCopy));

      setTimeout(() => {
        gameStart = true;
        if (isAutoGame) autoGame();
        else requestAnimationFrame(startGameManual);
      }, 100);
    } else {
      canvas.style.cursor = "default"; // Restaurar el cursor por defecto
    }
  };

  const printTextAlert = (text: string) => {
    const x = canvas.width / 2;
    const y = Math.abs(canvas.height / 3 - canvas.height);

    // Background
    ctx.beginPath();

    ctx.rect(0, y - 32, canvas.width, 48);
    ctx.fillStyle = "rgba(0, 0, 0, 0.5)";

    ctx.fill();

    // Text
    ctx.beginPath();
    ctx.font = "24px 'Fira Code', monospace";
    ctx.fillStyle = "#43D9AD";
    ctx.textAlign = "center";

    ctx.fillText(text, x, y);

    // Reload game
    ctx.beginPath();
    ctx.font = "14px 'Fira Code', monospace";
    ctx.fillStyle = "#607B96";
    ctx.textAlign = "center";

    ctx.fillText("Iniciar", x, y + 48);

    const rect = { x: x, y: y, width: 100, height: 35 };
    canvas.removeEventListener("click", (event) =>
      eventClickReload(event, rect)
    );
    canvas.addEventListener("click", (event) => eventClickReload(event, rect));
  };

  // #endregion Drawing

  // #region Gaming
  const relocateSnakeBody = () => {
    // Guardar las posiciones actuales del cuerpo en orden
    const previousPositions = snakeBody.map((part) => ({
      x: part.x,
      y: part.y,
    }));

    // Actualizar la posición del primer segmento con la posición actual de la cabeza
    let newSnakePart = { x: snake.x, y: snake.y };

    for (let i = 0; i < snakeBody.length; i++) {
      // Guardar la posición original del segmento actual
      const tempPosition = previousPositions[i];

      // Asignar la nueva posición al segmento actual
      snakeBody[i].x = newSnakePart.x;
      snakeBody[i].y = newSnakePart.y;

      // Actualizar `newSnakePart` para el siguiente segmento
      newSnakePart = tempPosition;
    }
  };

  const moveSnake = () => {
    const direction = snake.direction;
    if (gameStart) {
      if (direction == "top") snake.y -= widthSquare;
      else if (direction == "right") snake.x += widthSquare;
      else if (direction == "bottom") snake.y += widthSquare;
      else if (direction == "left") snake.x -= widthSquare;
    }
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    isEatApple();

    clearSnake();
    clearApple();

    if (gameStart) isGameOver();
    isShowAlert();

    if (!gameOver) printApple();

    if (gameStart) relocateSnakeBody();
    else printTextAlert("Deseas jugar?");

    printSnake();
  };

  const isEatApple = () => {
    const isX = snake.x + 8 == apple.x;
    const isY = snake.y + 8 == apple.y;

    if (isX && isY) {
      getRandomApple();
      clearApple();
      printApple();

      // Agregando un nuevo snakePart
      const lastSnakePart = snakeBody[snakeBody.length - 1];

      snakeBody.push({
        x: lastSnakePart.x,
        y: lastSnakePart.y,
      });

      // Agregando un nuevo punto
      const parent = document.querySelector(".game_points__list");
      const points = document.querySelector(".game_points__item");
      if (parent && points) parent.appendChild(points.cloneNode(true));

      return true;
    }
  };

  const isGameOver = () => {
    const isEatSnake = snakeBody.find(
      (item) => item.x == snake.x && item.y == snake.y
    );

    const isBorderX = snake.x <= 0 || snake.x >= canvas.width - widthSquare;
    const isBorderY = snake.y <= 0 || snake.y >= canvas.height - heightSquare;

    if (isEatSnake || isBorderX || isBorderY) gameOver = true;
  };

  const isShowAlert = () => {
    if (gameOver) printTextAlert("Perdiste!");
    else if (snakeBody.length > 50) {
      gameOver = true;
      printTextAlert("Ganaste!");
    }
  };

  // Start game
  let lastTime = 0;
  let elapsed = 0;

  const startGameManual = (timestamp: number) => {
    if (gameOver) return;

    // Calcular el tiempo transcurrido desde el último cuadro
    const delta = timestamp - lastTime;
    elapsed += delta;

    // Si ha pasado 1 segundo, realiza la acción
    if (elapsed >= snake.speed) {
      moveSnake();

      elapsed = 0; // Reinicia el acumulador
    }

    lastTime = timestamp;

    requestAnimationFrame(startGameManual);
  };

  const changeDirection = (keyCode: number) => {
    if (!gameStart) return;

    if (keyCode == 37) snake.direction = "left";
    else if (keyCode == 38) snake.direction = "top";
    else if (keyCode == 39) snake.direction = "right";
    else if (keyCode == 40) snake.direction = "bottom";
  };

  document.addEventListener("keydown", (evt) => changeDirection(evt.keyCode));
  const listKeyHtml = document.querySelectorAll(".game_control__key");

  listKeyHtml.forEach((item) => {
    item.addEventListener("click", (evt) => {
      const keyCode = (evt.target as any).dataset.key;
      changeDirection(keyCode);
    });
  });

  // #endregion Gaming

  // #region Gaming - Auto
  const manhattanDistance = (a: Coordinate, b: Coordinate) => {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
  };

  // Get from CHAT-GPT
  const findPath = (
    start: Coordinate,
    goal: Coordinate,
    snakeBody: Coordinate[]
  ) => {
    const countScore = 100;
    let openList: Coordinate[] = [start]; // Celdas a evaluar
    let closedList: Coordinate[] = []; // Celdas ya evaluadas
    let cameFrom: { [key: string]: Coordinate } = {}; // Para rastrear el camino

    let gScore = Array(countScore)
      .fill(countScore)
      .map(() => Array(countScore).fill(Infinity));
    let fScore = Array(countScore)
      .fill(countScore)
      .map(() => Array(countScore).fill(Infinity));

    gScore[start.x][start.y] = 0;
    fScore[start.x][start.y] = manhattanDistance(start, goal);

    while (openList.length > 0) {
      // Encuentra el nodo con menor fScore
      let current = openList.reduce((a, b) =>
        fScore[a.x][a.y] < fScore[b.x][b.y] ? a : b
      );

      if (current.x === goal.x && current.y === goal.y) {
        // Construir el camino final
        let path = [];
        while (current) {
          path.unshift(current);
          current = cameFrom[`${current.x},${current.y}`];
        }
        return path;
      }

      // Mueve el nodo actual a la lista cerrada
      openList = openList.filter((n) => n.x !== current.x || n.y !== current.y);
      closedList.push(current);

      // Explorar vecinos
      const neighbors = [
        { x: current.x + 1, y: current.y },
        { x: current.x - 1, y: current.y },
        { x: current.x, y: current.y + 1 },
        { x: current.x, y: current.y - 1 },
      ].filter(
        (n) =>
          n.x >= 0 &&
          n.x < countScore &&
          n.y >= 0 &&
          n.y < countScore &&
          !closedList.some((cl) => cl.x === n.x && cl.y === n.y) &&
          !snakeBody.some((sb) => sb.x === n.x && sb.y === n.y) // Evitar obstáculos
      );

      for (let neighbor of neighbors) {
        let tentativeGScore = gScore[current.x][current.y] + 1;

        if (tentativeGScore < gScore[neighbor.x][neighbor.y]) {
          cameFrom[`${neighbor.x},${neighbor.y}`] = current;
          gScore[neighbor.x][neighbor.y] = tentativeGScore;
          fScore[neighbor.x][neighbor.y] =
            tentativeGScore + manhattanDistance(neighbor, goal);

          if (!openList.some((n) => n.x === neighbor.x && n.y === neighbor.y)) {
            openList.push(neighbor);
          }
        }
      }
    }

    return []; // Sin solución
  };

  const moveToNextPoint = async (point: Coordinate) => {
    // Cambiar dirección según el objetivo
    if (snake.x > point.x) snake.direction = "left";
    else if (snake.x < point.x) snake.direction = "right";
    else if (snake.y > point.y) snake.direction = "top";
    else if (snake.y < point.y) snake.direction = "bottom";

    // Mover la cabeza al siguiente punto
    snake.x = point.x;
    snake.y = point.y;

    // Actualizar cuerpo
    relocateSnakeBody();

    // Verificar si la serpiente come la manzana
    const isEatAppleBool = isEatApple();

    // Actualizar el tablero
    clearSnake();
    clearApple();

    // Validar estado del juego
    // isGameOver();
    isShowAlert();

    if (!gameOver) printApple();

    // Dibujar nuevamente la serpiente
    printSnake();

    // Pausa según la velocidad
    await new Promise((resolve) => setTimeout(resolve, snake.speed));
    return isEatAppleBool;
  };

  const autoGame = async () => {
    getRandomApple();
    clearApple();

    printSnake();
    printApple();

    const newSnake = { x: snake.x / widthSquare, y: snake.y / heightSquare };
    const newApple = {
      x: apple.x / widthSquare,
      y: apple.y / widthSquare,
    };
    const newSnakeBody = snakeBody.map((item) => {
      return { x: item.x / widthSquare, y: item.y / widthSquare };
    });

    const points = findPath(newSnake, newApple, newSnakeBody);

    let index = 0;
    for (const item of points) {
      if (index == 0) {
        index++;
        continue;
      }

      const x = item.x * widthSquare;
      const y = item.y * heightSquare;

      await moveToNextPoint({ x, y });
      if (snake.x == apple.x && snake.y == apple.y) {
        const lastSnakePart = snakeBody[snakeBody.length - 1];

        snakeBody.push({
          x: lastSnakePart.x,
          y: lastSnakePart.y,
        });

        autoGame();
        break;
      }

      if (snakeBody.length > 50) {
        gameOver = true;
        printTextAlert("Ganaste!");
        break;
      }
    }
  };

  // #endregion Gaming - Auto

  // #region Start game
  const initGame = () => {
    if (isAutoGame) autoGame();
    else requestAnimationFrame(startGameManual);
  };

  initGame();
  // #endregion Start game

  // #region Control
  import hljs from "highlight.js/lib/core";
  import "highlight.js/styles/panda-syntax-dark.css";
  import javascript from "highlight.js/lib/languages/javascript";

  // Then register the languages you need
  hljs.registerLanguage("javascript", javascript);
  hljs.highlightAll();

  // #endregion Control

  // #region Debug
  const printCuadrillas = () => {
    const rows = 45;
    const cols = 45;
    const cellWidth = 8;
    const cellHeight = 8;

    printApple();
    printSnake();

    for (let row = 0; row < rows; row++) {
      for (let col = 0; col < cols; col++) {
        const x = col * cellWidth;
        const y = row * cellHeight;

        // Dibujar el contorno del rectángulo
        ctx.strokeRect(x, y, cellWidth, cellHeight);
      }
    }
  };

  // printCuadrillas();
  // #endregion Debug
</script>
